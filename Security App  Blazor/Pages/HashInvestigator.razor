@page "/hash-investigator"
@using Security_App__Blazor.Data
@using Security_App__Blazor.Data.Services
@inject FileService FileService

<h3>Hash Investigator</h3>

@if (unauthScripts == null)
{
    <p><em>Loading...</em></p>
}
else if (!unauthScripts.Any())
{
    <p>No unauthorized scripts found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Script Hash</th>
                <th>Script Content</th>
                <th>Subdomain</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (unauthScripts == null || !unauthScripts.Any())
            {
                <p>No unauthorized scripts found or still loading.</p>
            }
            else 
            {
                @foreach (var script in PaginatedScripts())
                {
                    <tr>
                        <td class="col-md-6">
                        <textarea rows="4" class="form-control">@script.Content</textarea>
                    </td>
                    <td class="col-md-2">@script.Hash</td>
                    <td class="col-md-2">@script.Subdomain</td>
                    <td class="col-md-2">
                        <button class="btn btn-primary" @onclick="() => ApproveHash(script)">Approve</button>
                    </td>
                </tr>
                }
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@IsFirstPage()">Previous</button>
    <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage()">Next</button>
    <p>Page @currentPage of @TotalPages()</p>
}

@code {
    private List<ScriptHash> unauthScripts;
    private int currentPage = 1;
    private int pageSize = 10;
 
    private bool IsFirstPage() => currentPage == 1;
    private bool IsLastPage() => currentPage >= TotalPages();

    private int TotalPages() => (int)Math.Ceiling((double)unauthScripts.Count / pageSize);

    private void NextPage()
    {
        if (!IsLastPage())
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage())
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private IEnumerable<ScriptHash> PaginatedScripts()
    {
        return unauthScripts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);
    }
    protected override async Task OnInitializedAsync()
    {
        unauthScripts = await FileService.GetUnauthScripts();
        // Optionally handle empty or null lists if needed
        if (unauthScripts == null)
            unauthScripts = new List<ScriptHash>();
    }

    private async Task ApproveHash(ScriptHash script)
    {
        await FileService.ApproveHash(script.Hash, script.FilePath);
        unauthScripts.RemoveAll(s => s.Hash == script.Hash);
    }

    public class ScriptHash
    {
        public string Hash { get; set; }
        public string Content { get; set; } // This now holds the entire content
        public string Subdomain { get; set; }
        public string FilePath { get; set; }
    }
}